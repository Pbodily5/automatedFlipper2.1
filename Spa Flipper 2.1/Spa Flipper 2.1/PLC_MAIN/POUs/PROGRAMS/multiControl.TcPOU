<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="multiControl" Id="{7ac8876c-7553-4aa3-8d03-b92ac1cc6e8f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM multiControl
VAR
	multiCtrlFrameIndex : INT; //Index used to switch frame on multiControlScreen
	
	aActionList 		: ARRAY[1..11] OF STRING := ['BRAKE OFF','BRAKE ON','DISABLE','ENABLE','HOME TO SENSOR','HOME TO TORQUE','MOVE TO POSITION','JOG','MOVE TO TORQUE','RESET','SET COUNT']; //List of usable actions found in FB_MultiMotorController.
	nActionIndex 		: INT;
	nPrevActionIndex 	: INT;
	pMotorRef1 			: POINTER TO FB_teknicMotorEC;
	pMotorRef2 			: POINTER TO FB_teknicMotorEC;
	pMotorRef3 			: POINTER TO FB_teknicMotorEC;
	pMotorRef4 			: POINTER TO FB_teknicMotorEC;
	aMotorEnabledRef 	: ARRAY[1..4] OF POINTER TO FB_teknicMotorEC; //Used to act on only motors currently enabled
	aMotorRef 			: ARRAY[1..4] OF POINTER TO FB_teknicMotorEC; // Used to update live values of motors in selection
	fRelease			: F_TRIG; 
	bReleaseTrig		: BOOL;

	// Motor Disp //
	nMotorControlIndex 		: INT; // Index used to change disp of motor controls. 0-Rotation, 1- Clamping, 2-Columns, 3-Width. 
	nPrevMotorControlIndex 	: INT; // INdex used to reset selections when frame changes 
	aDispFontColor 			: ARRAY[1..4] OF DWORD; // Used to change font color of motor display when toggled. 
	bHideDispMotor3 		: BOOL; //Used to hide or show controls for motor 3. 
	bHideDispMotor4			: BOOL;
	bHideDirection			: BOOL; //Hides direction of buttons based on selected action
	bHideSetPos				: BOOL; //Hides Set Position Entry based on selected action
	bHideSetTorq			: BOOL; //Hides Set Torque Entry based on selected action
	
	aMotorActive 	: ARRAY[1..4] OF BOOL; // Tracks user selected motors
	aMotorError 	: ARRAY[1..4] OF BOOL; // Indictates error for current action
	aMotorErrorId 	: ARRAY[1..4] OF UDINT; //Indicates error Id for current action
	aMotorDone 		: ARRAY[1..4] OF BOOL; //Indicates action is done
	aMotorInverted  : ARRAY[1..4] OF BOOL; //Indicates whether the motor is inverted
	
	sMotorDisp1 : STRING; // Used to dynamically change the title of motor 1. 
	sMotorDisp2 : STRING;
	sMotorDisp3 : STRING;
	sMotorDisp4 : STRING;
	
	// Motor Control //
	aMotorEnable 	: ARRAY[1..4] OF BOOL; //Array defining whether a motor is selected and should be used for the current action. 
	nCounter 		: INT; //Index for FOR loops.
	aMotorSpeed 	: ARRAY[1..4] OF LREAL; //Displays motors' speeds
	aMotorPos 		: ARRAY[1..4] OF LREAL; //Displays motors' positions
	aMotorTorque 	: ARRAY[1..4] OF LREAL; //Displays motors' torques
	aMotorSetPos 	: ARRAY[1..4] OF LREAL; //User set position for motors
	aMotorSetTorq 	: ARRAY[1..4] OF LREAL; //User set torque for motors
	bHomeDirection  : BOOL; // Direction of moves.
	nDirection 		: INT;	//Calculated direction based on inverted motor or not. 
	bExecute 		: BOOL; // Execute selected action 
	i : INT;
	
	// === parametersHandler Vars === //
	aStatusVar 				: ARRAY[1..12] OF BOOL; // Array containing boolean value for each status variable represented on screen. 
	aMotorSelection 		: ARRAY[1..10] OF STRING := ['LEFT ROTATION','RIGHT ROTATION','COLUMN 0','COLUMN 1','COLUMN 2','COLUMN 3','LEFT WIDTH','RIGHT WIDTH','LEFT CLAMPING','RIGHT CLAMPING']; //Drop down box to select motor to read/write
	nMotorSelectionIndex 	: INT; //Index of drop down box
	pMotorRefParam			: POINTER TO FB_teknicMotorEC;
	eParameter				: MC_AxisParameter;
	nParameterIndex			: INT; // Index of combo box for selected parameter
	fValueIn				: LREAL; // Value used to write to parameter
	fValueOut				: LREAL;// Value from read parameter. 
	bReadParam				: BOOL; // Btn used to trigger read parameter
	bWriteParam				: BOOL; // Btn used to trigger write parameter
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE nMotorControlIndex OF 
	0:// Rotation Selected
		aMotorRef[1] := ADR(GVL_devices.fbLftRotationMotor);
		aMotorRef[2] := ADR(GVL_devices.fbRhtRotationMotor);
		aMotorRef[3] := 0;
		aMotorRef[4] := 0;
		IF aMotorEnable[1] THEN
			pMotorRef1 := ADR(GVL_devices.fbLftRotationMotor);
		ELSE
			pMotorRef1 := 0;
		END_IF
		IF aMotorEnable[2] THEN
			pMotorRef2 := ADR(GVL_devices.fbRhtRotationMotor);
		ELSE
			pMotorRef2 := 0;
		END_IF
		pMotorRef3 := 0;
		pMotorRef4 := 0;
	    bHideDispMotor3 := TRUE;
	    bHideDispMotor4 := TRUE;
		sMotorDisp1 := 'LEFT ROTATION';
		sMotorDisp2 := 'RIGHT ROTATION';
		sMotorDisp3 := '';
		sMotorDisp4 := '';
		
	1:// Clamping Selected
		aMotorRef[1] := ADR(GVL_devices.fbLftClampMotor);
		aMotorRef[2] := ADR(GVL_devices.fbRhtClampMotor);
		aMotorRef[3] := 0;
		aMotorRef[4] := 0;
		IF aMotorEnable[1] THEN
			pMotorRef1 := ADR(GVL_devices.fbLftClampMotor);
		ELSE
			pMotorRef1 := 0;
		END_IF
		IF aMotorEnable[2] THEN
			pMotorRef2 := ADR(GVL_devices.fbRhtClampMotor);
		ELSE
			pMotorRef2 := 0;
		END_IF
		pMotorRef3 := 0;
		pMotorRef4 := 0;
	    bHideDispMotor3 := TRUE;
	    bHideDispMotor4 := TRUE;
		sMotorDisp1 := 'LEFT CLAMPING';
		sMotorDisp2 := 'RIGHT CLAMPING';
		sMotorDisp3 := '';
		sMotorDisp4 := '';
		
	2:// Columns Selected
		aMotorRef[1] := ADR(GVL_devices.fbColumn0Motor);
		aMotorRef[2] := ADR(GVL_devices.fbColumn1Motor);
		aMotorRef[3] := ADR(GVL_devices.fbColumn2Motor);
		aMotorRef[4] := ADR(GVL_devices.fbColumn3Motor);
		
		IF aMotorEnable[1] THEN
			pMotorRef1 := ADR(GVL_devices.fbColumn0Motor);
		ELSE
			pMotorRef1 := 0;
		END_IF
		IF aMotorEnable[2] THEN
			pMotorRef2 := ADR(GVL_devices.fbColumn1Motor);
		ELSE
			pMotorRef2 := 0;
		END_IF
		IF aMotorEnable[3] THEN
			pMotorRef3 := ADR(GVL_devices.fbColumn2Motor);
		ELSE
			pMotorRef3 := 0;
		END_IF
		IF aMotorEnable[4] THEN
			pMotorRef4 := ADR(GVL_devices.fbColumn3Motor);
		ELSE
			pMotorRef4 := 0;
		END_IF
	    bHideDispMotor3 := FALSE;
	    bHideDispMotor4 := FALSE;
		sMotorDisp1 := 'COLUMN 0';
		sMotorDisp2 := 'COLUMN 1';
		sMotorDisp3 := 'COLUMN 2';
		sMotorDisp4 := 'COLUMN 3';
		
	3:// Width Selected
		aMotorRef[1] := ADR(GVL_devices.fbLftWidthMotor);
		aMotorRef[2] := ADR(GVL_devices.fbRhtWidthMotor);
		aMotorRef[3] := 0;
		aMotorRef[4] := 0;
		IF aMotorEnable[1] THEN
			pMotorRef1 := ADR(GVL_devices.fbLftWidthMotor);
		ELSE
			pMotorRef1 := 0;
		END_IF
		IF aMotorEnable[2] THEN
			pMotorRef2 := ADR(GVL_devices.fbRhtWidthMotor);
		ELSE
			pMotorRef2 := 0;
		END_IF
		pMotorRef3 := 0;
		pMotorRef4 := 0;
	    bHideDispMotor3 := TRUE;
	    bHideDispMotor4 := TRUE;
		sMotorDisp1 := 'LEFT WIDTH';
		sMotorDisp2 := 'RIGHT WIDTH';
		sMotorDisp3 := '';
		sMotorDisp4 := '';
END_CASE

aMotorEnabledRef[1] := pMotorRef1;
aMotorEnabledRef[2] := pMotorRef2;
aMotorEnabledRef[3] := pMotorRef3;
aMotorEnabledRef[4] := pMotorRef4;

// === Update Motor Displays and Position,Torque,Inverted,and Speed. === //
FOR nCounter := 1 TO 4 BY 1 DO
	IF aMotorEnable[nCounter] THEN
		aDispFontColor[nCounter] := 16#FFFFFFFF;
	ELSE
		aDispFontColor[nCounter] := 16#FF000000;
	END_IF
END_FOR

FOR nCounter := 1 TO 4 BY 1 DO
	IF aMotorRef[nCounter] <> 0 THEN
		aMotorSpeed[nCounter] := aMotorRef[nCounter]^.fbMotor.NcToPlc.ActVelo;
	END_IF
END_FOR

FOR nCounter := 1 TO 4 BY 1 DO
	IF aMotorRef[nCounter] <> 0 THEN
		aMotorPos[nCounter] := aMotorRef[nCounter]^.fbMotor.NcToPlc.ActPos;
	END_IF
END_FOR

FOR nCounter := 1 TO 4 BY 1 DO
	IF aMotorRef[nCounter] <> 0 THEN
		aMotorTorque[nCounter] := aMotorRef[nCounter]^.fbMotor.NcToPlc.ActTorque;
	END_IF
END_FOR

FOR nCounter := 1 TO 4 BY 1 DO
	IF aMotorRef[nCounter] <> 0 THEN
		aMotorInverted[nCounter] := aMotorRef[nCounter]^.isMotorInverted;
	END_IF
END_FOR

// === Clear selections and user inputs when frame changes === //
IF nPrevMotorControlIndex <> nMotorControlIndex OR nActionIndex <> nPrevActionIndex THEN
	FOR nCounter := 1 TO 4 BY 1 DO
		aMotorEnable[nCounter] := FALSE;
		aMotorSetPos[nCounter] := 0;
		aMotorSetTorq[nCounter] := 0;
		aMotorActive[nCounter] := FALSE;
		aMotorError[nCounter] := FALSE;
		aMotorErrorId[nCounter] := 0;
		aMotorDone[nCounter] := FALSE;
	END_FOR
	nPrevMotorControlIndex := nMotorControlIndex;
	nPrevActionIndex := nActionIndex;
END_IF

// === Reset Motor State Variables and FB Variables at the end of an Execute === //
fRelease(CLK:=bExecute , Q=>bReleaseTrig );
IF bReleaseTrig THEN
	FOR nCounter := 1 TO 4 BY 1 DO
		aMotorActive[nCounter] := FALSE;
		aMotorError[nCounter] := FALSE;
		aMotorErrorId[nCounter] := 0;
		aMotorDone[nCounter] := FALSE;
		IF aMotorEnabledRef[nCounter] <> 0 THEN
			aMotorEnabledRef[nCounter]^.resetMotorCommands(); 	
		END_IF
	END_FOR
END_IF

// === Default Hide controls === //
bHideSetPos	 := TRUE;
bHideSetTorq := TRUE;
bHideDirection := TRUE;

// === CASE STATEMENT to execute actions on enabled motors === //
CASE nActionIndex OF 
	1:// Brake Off
		IF bExecute THEN
			FOR i := 1 TO 4 BY 1 DO
				IF aMotorEnabledRef[i] <> 0 THEN
					IF aMotorEnabledRef[i]^.brakeOff() THEN
						aMotorDone[i] := TRUE;
					END_IF
				END_IF
			END_FOR
		END_IF
		
	2:// Brake On
		IF bExecute THEN
			FOR i := 1 TO 4 BY 1 DO
				IF aMotorEnabledRef[i] <> 0 THEN
					IF aMotorEnabledRef[i]^.brakeOn() THEN
						aMotorDone[i] := TRUE;
					END_IF
				END_IF
			END_FOR
		END_IF
		
	3:// Disable
		IF bExecute THEN
			FOR i := 1 TO 4 BY 1 DO
				IF aMotorEnabledRef[i] <> 0 THEN
					CASE aMotorEnabledRef[i]^.disable() OF
						1:// Done
							aMotorDone[i] := TRUE;
						13:// Error
							aMotorError[i] := TRUE;	
							aMotorErrorId[i] := aMotorEnabledRef[i]^.motorErrorId;
					END_CASE
				END_IF
			END_FOR
		END_IF
			
	4:// Enable
		IF bExecute THEN
			FOR i := 1 TO 4 BY 1 DO
				IF aMotorEnabledRef[i] <> 0 THEN
					CASE aMotorEnabledRef[i]^.enable() OF
						1:// Done
							aMotorDone[i] := TRUE;
						13:// Error
							aMotorError[i] := TRUE;	
							aMotorErrorId[i] := aMotorEnabledRef[i]^.motorErrorId;
					END_CASE
				END_IF
			END_FOR
		END_IF
		
	5:// homeToSensor
		IF bExecute THEN
			FOR i := 1 TO 4 BY 1 DO
				IF aMotorEnabledRef[i] <> 0 THEN
					CASE aMotorEnabledRef[i]^.homeToSensor(0) OF
						1:// Done
							aMotorDone[i] := TRUE;
						2:// Active
							aMotorActive[i] := TRUE;
						13:// Error
							aMotorError[i] := TRUE;	
							aMotorErrorId[i] := aMotorEnabledRef[i]^.motorErrorId;
					END_CASE
				END_IF
			END_FOR
		END_IF
		
	6:// homeToTorque
		bHideSetTorq := FALSE;
		IF bExecute THEN
			FOR i := 1 TO 4 BY 1 DO
				IF aMotorEnabledRef[i] <> 0 THEN
					aMotorEnabledRef[i]^.homeTorqueLimitIn := aMotorTorque[i];
					CASE aMotorEnabledRef[i]^.homeToTorque() OF
						1:// Done
							aMotorDone[i] := TRUE;
						2:// Active
							aMotorActive[i] := TRUE;
						13:// Error
							aMotorError[i] := TRUE;	
							aMotorErrorId[i] := aMotorEnabledRef[i]^.motorErrorId;
					END_CASE
				END_IF
			END_FOR
		END_IF
		
	7:// moveTo
		bHideSetPos	 := FALSE;
		IF bExecute THEN
			FOR i := 1 TO 4 BY 1 DO
				IF aMotorEnabledRef[i] <> 0 THEN
					aMotorEnabledRef[i]^.homeTorqueLimitIn := aMotorTorque[i];
					CASE aMotorEnabledRef[i]^.moveTo('NULL',aMotorSetPos[i]/25.4) OF
						1:// Done
							aMotorDone[i] := TRUE;
						2,15:// Active
							aMotorActive[i] := TRUE;
						13:// Error
							aMotorError[i] := TRUE;	
							aMotorErrorId[i] := aMotorEnabledRef[i]^.motorErrorId;
					END_CASE
				END_IF
			END_FOR
		END_IF
		
	8:// moveToJog
	bHideDirection := FALSE;
		IF bExecute THEN
			FOR i := 1 TO 4 BY 1 DO
				IF aMotorEnabledRef[i] <> 0 THEN
					IF bHomeDirection THEN
						IF aMotorEnabledRef[i]^.isMotorInverted THEN
							nDirection := 1;
						ELSE
							nDirection := 0;
						END_IF
					ELSE
						IF aMotorEnabledRef[i]^.isMotorInverted THEN
							nDirection := 0;
						ELSE
							nDirection := 1;
						END_IF
					END_IF
					CASE aMotorEnabledRef[i]^.moveToJog(nDirection) OF
						1:// Active
							aMotorActive[i] := TRUE;
						13:// Error
							aMotorError[i] := TRUE;	
							aMotorErrorId[i] := aMotorEnabledRef[i]^.motorErrorId;
					END_CASE
				END_IF
			END_FOR
		END_IF
		
	9:// moveToTorque
		bHideSetTorq	:= TRUE;
		bHideDirection 	:= FALSE;
		IF bExecute THEN
			FOR i := 1 TO 4 BY 1 DO
				IF aMotorEnabledRef[i] <> 0 THEN
					IF bHomeDirection THEN
						IF aMotorEnabledRef[i]^.isMotorInverted THEN
							nDirection := 1;
						ELSE
							nDirection := 0;
						END_IF
					ELSE
						IF aMotorEnabledRef[i]^.isMotorInverted THEN
							nDirection := 0;
						ELSE
							nDirection := 1;
						END_IF
					END_IF
					CASE aMotorEnabledRef[i]^.moveToTorque('NULL',aMotorSetTorq[i],nDirection) OF
						1:// Done
							aMotorDone[i] := TRUE;
						2:// Active
							aMotorActive[i] := TRUE;
						13:// Error
							aMotorError[i] := TRUE;	
							aMotorErrorId[i] := aMotorEnabledRef[i]^.motorErrorId;
					END_CASE
				END_IF
			END_FOR
		END_IF
		
	10:// motorReset
		IF bExecute THEN
			FOR i := 1 TO 4 BY 1 DO
				IF aMotorEnabledRef[i] <> 0 THEN
					CASE aMotorEnabledRef[i]^.reset() OF
						1:// Done
							aMotorDone[i] := TRUE;
						2:// Active
							aMotorActive[i] := TRUE;
						13:// Error
							aMotorError[i] := TRUE;	
							aMotorErrorId[i] := aMotorEnabledRef[i]^.motorErrorId;
					END_CASE
				END_IF
			END_FOR
		END_IF
		
	11:// homeSetToCount
		bHideSetPos	 := FALSE;
		IF bExecute THEN
			FOR i := 1 TO 4 BY 1 DO
				IF aMotorEnabledRef[i] <> 0 THEN
					CASE aMotorEnabledRef[i]^.homeSetToCount(aMotorSetPos[i]) OF
						1:// Done
							aMotorDone[i] := TRUE;
						2:// Active
							aMotorActive[i] := TRUE;
						13:// Error
							aMotorError[i] := TRUE;	
							aMotorErrorId[i] := aMotorEnabledRef[i]^.motorErrorId;
					END_CASE
				END_IF
			END_FOR
		END_IF
END_CASE


IF multiCtrlFrameIndex = 3 THEN
	parametersHandler();
END_IF]]></ST>
    </Implementation>
    <Method Name="parametersHandler" Id="{e1c52b1c-3ce8-446f-bcbc-858102c18e12}">
      <Declaration><![CDATA[METHOD parametersHandler : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nMotorControlIndex OF 
	1://Left Rotation 
		pMotorRefParam := ADR(GVL_devices.fbLftRotationMotor);
	2://Right Rotation 
		pMotorRefParam := ADR(GVL_devices.fbRhtRotationMotor);
	3://Column 0
		pMotorRefParam := ADR(GVL_devices.fbColumn0Motor); 
	4://Column 1
		pMotorRefParam := ADR(GVL_devices.fbColumn1Motor);
	5://Column 2 
		pMotorRefParam := ADR(GVL_devices.fbColumn2Motor);
	6://Column 3
		pMotorRefParam := ADR(GVL_devices.fbColumn3Motor);
	7://Left Width
		pMotorRefParam := ADR(GVL_devices.fbLftWidthMotor);
	8://Right Width
		pMotorRefParam := ADR(GVL_devices.fbRhtWidthMotor);
	9://Left Clamp
		pMotorRefParam := ADR(GVL_devices.fbLftClampMotor);
	10://Right Clamp
		pMotorRefParam := ADR(GVL_devices.fbRhtClampMotor);
END_CASE

aStatusVar[1] := pMotorRefParam^.stMotorStatus.Error;
aStatusVar[2] := pMotorRefParam^.stMotorStatus.ErrorStop;
aStatusVar[3] := pMotorRefParam^.stMotorStatus.Disabled;
aStatusVar[4] := pMotorRefParam^.stMotorStatus.Operational;
aStatusVar[5] := pMotorRefParam^.stMotorStatus.ControlLoopClosed;
aStatusVar[6] := pMotorRefParam^.stMotorStatus.ProtectedMode;
aStatusVar[7] := pMotorRefParam^.stMotorStatus.Homed;
aStatusVar[8] := pMotorRefParam^.stMotorStatus.MotionCommandsLocked;
aStatusVar[9] := pMotorRefParam^.stMotorStatus.SoftLimitMinExceeded;
aStatusVar[10] := pMotorRefParam^.stMotorStatus.SoftLimitMaxExceeded;
aStatusVar[11] := pMotorRefParam^.stMotorStatus.DriveDeviceError;
aStatusVar[12] := pMotorRefParam^.stMotorStatus.Coupled;

eParameter := nParameterIndex;

IF bReadParam THEN
	fValueOut := pMotorRefParam^.fReadValue;
	CASE pMotorRefParam^.readRealParameter(eParameter) OF 
		1,13: bReadParam := FALSE;
			pMotorRefParam^.resetMotorCommands();
	END_CASE
END_IF

IF bWriteParam THEN
	CASE pMotorRefParam^.writeRealParameter(eParameter,fValueIn) OF 
		1,13: bWriteParam := FALSE;
			pMotorRefParam^.resetMotorCommands();
	END_CASE
END_IF

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="multiControl">
      <LineId Id="5" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="228" Count="2" />
      <LineId Id="227" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="66" Count="3" />
      <LineId Id="65" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="34" Count="5" />
      <LineId Id="614" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="224" Count="2" />
      <LineId Id="223" Count="0" />
      <LineId Id="73" Count="16" />
      <LineId Id="72" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="218" Count="2" />
      <LineId Id="217" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="109" Count="9" />
      <LineId Id="126" Count="8" />
      <LineId Id="119" Count="0" />
      <LineId Id="121" Count="4" />
      <LineId Id="108" Count="0" />
      <LineId Id="615" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="214" Count="2" />
      <LineId Id="213" Count="0" />
      <LineId Id="91" Count="16" />
      <LineId Id="90" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="2" />
      <LineId Id="613" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="245" Count="1" />
      <LineId Id="244" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="196" Count="3" />
      <LineId Id="194" Count="0" />
      <LineId Id="201" Count="4" />
      <LineId Id="200" Count="0" />
      <LineId Id="207" Count="4" />
      <LineId Id="206" Count="0" />
      <LineId Id="694" Count="4" />
      <LineId Id="265" Count="0" />
      <LineId Id="699" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="280" Count="3" />
      <LineId Id="255" Count="1" />
      <LineId Id="409" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="609" Count="0" />
      <LineId Id="582" Count="0" />
      <LineId Id="564" Count="0" />
      <LineId Id="583" Count="0" />
      <LineId Id="587" Count="0" />
      <LineId Id="591" Count="3" />
      <LineId Id="598" Count="1" />
      <LineId Id="608" Count="0" />
      <LineId Id="585" Count="1" />
      <LineId Id="610" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="563" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="612" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="400" Count="5" />
      <LineId Id="398" Count="1" />
      <LineId Id="304" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="410" Count="7" />
      <LineId Id="315" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="419" Count="6" />
      <LineId Id="429" Count="0" />
      <LineId Id="426" Count="1" />
      <LineId Id="324" Count="0" />
      <LineId Id="431" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="432" Count="11" />
      <LineId Id="333" Count="0" />
      <LineId Id="575" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="444" Count="5" />
      <LineId Id="456" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="450" Count="5" />
      <LineId Id="342" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="566" Count="0" />
      <LineId Id="459" Count="2" />
      <LineId Id="473" Count="0" />
      <LineId Id="462" Count="10" />
      <LineId Id="351" Count="0" />
      <LineId Id="567" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="568" Count="0" />
      <LineId Id="474" Count="14" />
      <LineId Id="360" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="559" Count="0" />
      <LineId Id="504" Count="2" />
      <LineId Id="523" Count="0" />
      <LineId Id="519" Count="1" />
      <LineId Id="524" Count="1" />
      <LineId Id="521" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="528" Count="3" />
      <LineId Id="527" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="510" Count="7" />
      <LineId Id="369" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="560" Count="0" />
      <LineId Id="532" Count="26" />
      <LineId Id="378" Count="0" />
      <LineId Id="576" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="489" Count="2" />
      <LineId Id="493" Count="10" />
      <LineId Id="387" Count="0" />
      <LineId Id="700" Count="0" />
      <LineId Id="702" Count="0" />
      <LineId Id="717" Count="0" />
      <LineId Id="703" Count="13" />
      <LineId Id="701" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="628" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="630" Count="1" />
    </LineIds>
    <LineIds Name="multiControl.parametersHandler">
      <LineId Id="5" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="33" Count="9" />
      <LineId Id="44" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="30" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>